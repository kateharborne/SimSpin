% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_images.R
\name{plot_mass}
\alias{plot_mass}
\title{Plotting pretty mass images}
\usage{
plot_mass(
  mass_image,
  fig = c(0, 1, 0, 1),
  new = F,
  units = expression("Mass, M"["sol"]),
  main = "",
  radii = NA,
  na.color = "white",
  zlim = NA,
  legend = T,
  titleshift = -4,
  labN = 5,
  radii_col = "red",
  ...
)
}
\arguments{
\item{mass_image}{Numeric array containing the mass image}

\item{fig}{Numeric array of length 4 describing the boundary of the image}

\item{new}{Boolean. Should the image be added to the existing plot? Default
is FALSE.}

\item{units}{String describing the units of the values contained
in the image.}

\item{main}{Image title, default "".}

\item{radii}{list - containing a, b, and ang (if wishing to plot half-mass
radii ellipse).}

\item{na.color}{String. Colour given to NA values in the image.}

\item{zlim}{Numeric array of length 2. Describing the numeric range of
colours in the image. Default is NA, in which the range will be described by
the minimum and maximum values in the image.}

\item{legend}{Boolean to determine if the colour bar axis should be printed
at the bottom of the image. Default is T.}

\item{titleshift}{Numeric. Describes the distance between the colour bar and
the units. Default is -4.}

\item{labN}{Numeric. Describes the minimum number of numeric labels added to
the colour bar. Default is 5.}

\item{radii_col}{String. Describing the colour of the ellipse drawn if
\code{radii} list is specified. Default is "red".}

\item{...}{Further variables passed to magimage. See
\code{\link[magicaxis]{magimage}} for further details.}
}
\value{
Returns an image to the plotting window of the input
\code{build_datacube} image.
}
\description{
A function to produce a plot of the mass image produced by
\code{build_datacube()} with associated colour bar and labels.
}
\examples{
ss_pd_gadget = system.file("extdata", "SimSpin_example_Gadget",
package = "SimSpin")
ss_gadget = make_simspin_file(ss_pd_gadget, write_to_file = FALSE)
cube = build_datacube(simspin_file = ss_gadget,
                      telescope = telescope(type="SAMI"),
                      observing_strategy = observing_strategy(),
                      method = "velocity", mass_flag=TRUE)
plot_mass(cube$observed_images$mass_image)
}
