% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/voronoi.R
\name{voronoi}
\alias{voronoi}
\title{A function for Voronoi tessellation of pixels to meet some minimum particle
number threshold}
\usage{
voronoi(
  part_in_spaxel,
  obs,
  particle_limit,
  roundness_limit = 0.3,
  uniform_limit = 0.8,
  verbose = F
)
}
\arguments{
\item{part_in_spaxel}{The list containing the pixel position
(\code{$pixel_pos}), contained particle IDs (\code{$ID}) and number of
particles per pixel (\code{$N}) as produced in the \code{build_datacube()}
function.}

\item{obs}{The list produced as part of the \code{observation()} function for
a given mock observation.}

\item{particle_limit}{Numeric. The minimum number of requested particles per
pixel.}

\item{roundness_limit}{Numeric float between 0 and 1. Default is 0.3.
Describes how round pixels should be within the voronoi tesselation, where 0
is perfectly round and 1 is elongated.}

\item{uniform_limit}{Numeric float between 0 and 1. Default is 0.8. Describes
how close to the particle limit joined pixels must be to be binned together.}

\item{verbose}{Boolean. Default is FALSE. Outputs running commentary of code
progress when TRUE.}
}
\value{
Returns a list mimicking \code{part_in_spaxel} input, but with each
row describing a voronoi bin and \code{$pixel_pos} describing all pixel
positions within that bin. List should contain:
\enumerate{
\item \code{pixel_pos} - a numeric array containing all pixel positions
within a givien voronoi bin.
\item \code{ID} - a numeric array of the particle IDs belonging within the
voronoi bin.
\item \code{N} - the number of particles within the voronoi bin.
}
}
\description{
The purpose of this function is to bin particles into Voronoi tesselated
pixels which meet a minimum particle per pixel limit to reduce the effects of
shot noise on the resulting kinematic measurements.
}
\examples{
ss_gadget = system.file("extdata", "SimSpin_example_Gadget_spectra.Rdata",
                        package = "SimSpin")
cube = build_datacube(simspin_file = ss_gadget,
                     telescope = telescope(type="SAMI"),
                     observing_strategy = observing_strategy(),
                     voronoi_bin = TRUE, vorbin_limit = 10)

}
